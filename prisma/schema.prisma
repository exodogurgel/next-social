// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id
  username    String   @unique
  avatar      String?
  cover       String?
  name        String?
  surname     String?
  description String?
  city        String?
  school      String?
  website     String?
  created_at  DateTime @default(now())

  posts                    Post[]
  likes                    Like[]
  Comment                  Comment[]
  followers                Follower[]      @relation("UserFollowers")
  followings               Follower[]      @relation("UserFollowings")
  fallow_requests_sent     FollowRequest[] @relation("FallowRequestsSent")
  fallow_requests_received FollowRequest[] @relation("FallowRequestsReceived")
  blocks                   Block[]         @relation("BlockSent")
  blocked_by               Block[]         @relation("BlocksReceived")
  stories                  Story[]

  @@map("users")
}

model Post {
  id          Int      @id @default(autoincrement())
  description String
  image       String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  user_id     String

  user     User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  likes    Like[]
  comments Comment[]

  @@map("posts")
}

model Comment {
  id          Int      @id @default(autoincrement())
  description String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  user_id     String
  post_id     Int

  user  User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  post  Post   @relation(fields: [post_id], references: [id], onDelete: Cascade)
  likes Like[]

  @@map("comments")
}

model Like {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  user_id    String
  post_id    Int?
  comment_id Int?

  user     User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  post     Post?    @relation(fields: [post_id], references: [id], onDelete: Cascade)
  comments Comment? @relation(fields: [comment_id], references: [id], onDelete: Cascade)

  @@map("likes")
}

model Follower {
  id           Int      @id @default(autoincrement())
  created_at   DateTime @default(now())
  follower_id  String
  following_id String

  follower  User @relation("UserFollowers", fields: [follower_id], references: [id], onDelete: Cascade)
  following User @relation("UserFollowings", fields: [following_id], references: [id], onDelete: Cascade)

  @@map("followers")
}

model FollowRequest {
  id          Int      @id @default(autoincrement())
  created_at  DateTime @default(now())
  sender_id   String
  receiver_id String

  sender   User @relation("FallowRequestsSent", fields: [sender_id], references: [id], onDelete: Cascade)
  receiver User @relation("FallowRequestsReceived", fields: [receiver_id], references: [id], onDelete: Cascade)

  @@unique([sender_id, receiver_id])
  @@map("follow_requests")
}

model Block {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  blocker_id String
  blocked_id String

  blocker User @relation("BlockSent", fields: [blocker_id], references: [id], onDelete: Cascade)
  blocked User @relation("BlocksReceived", fields: [blocked_id], references: [id], onDelete: Cascade)

  @@unique([blocker_id, blocked_id])
  @@map("blocks")
}

model Story {
  id         Int      @id @default(autoincrement())
  image      String
  created_at DateTime @default(now())
  expires_at DateTime
  user_id    String   @unique

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("stories")
}
